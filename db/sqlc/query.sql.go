// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package sqlc

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (title, created_time, updated_time)
VALUES ($1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, title, created_time, updated_time
`

func (q *Queries) CreateTodo(ctx context.Context, title string) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo, title)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const deleteAllTodos = `-- name: DeleteAllTodos :exec
DELETE FROM todos
`

func (q *Queries) DeleteAllTodos(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllTodos)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, title, created_time, updated_time
FROM todos
WHERE id = $1
`

func (q *Queries) GetTodoByID(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodoByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedTime,
		&i.UpdatedTime,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, title, created_time, updated_time
FROM todos
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedTime,
			&i.UpdatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
SET title = $1, updated_time = CURRENT_TIMESTAMP
WHERE id = $2
`

type UpdateTodoParams struct {
	Title string
	ID    int32
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.Exec(ctx, updateTodo, arg.Title, arg.ID)
	return err
}
